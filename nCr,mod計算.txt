ll M = 1000000007;
//M適宜変更
mint nCr(ll n,ll r){
  mint a = 1;
  repsn(i,1,n){
    a *= i;
  }

  mint b = 1;
  repsn(i,1,r){
    b *= i;
  }
  repsn(i,1,n-r){
    b *= i;
  }
  return a * b.pow(M-2);
}



//最強,前処理(n), 計算(1)
const ll MOD = 998244353;
vector<long long> fact, fact_inv, inv;
/*  init_nCk :二項係数のための前処理
    計算量:O(n)
*/
void init_nCk(ll SIZE) {
    fact.resize(SIZE + 5);
    fact_inv.resize(SIZE + 5);
    inv.resize(SIZE + 5);
    fact[0] = fact[1] = 1;
    fact_inv[0] = fact_inv[1] = 1;
    inv[1] = 1;
    for (int i = 2; i < SIZE + 5; i++) {
        fact[i] = fact[i - 1] * i % MOD;
        inv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;
        fact_inv[i] = fact_inv[i - 1] * inv[i] % MOD;
    }
}
/*  nCk :MODでの二項係数を求める(前処理 int_nCk が必要)
    計算量:O(1)
*/
long long nCk(ll n, ll k) {
    assert(!(n < k));
    assert(!(n < 0 || k < 0));
    return fact[n] * (fact_inv[k] * fact_inv[n - k] % MOD) % MOD;
}





// Mod使わずllに収まる範囲でオーバーフローしないやつ

#define CMAX 1010
ll noinit = 1; ll memo[CMAX][CMAX];
ll nCr(ll a, ll b) {
    if (noinit) {
        rep(i, CMAX) rep(j, CMAX) memo[i][j] = -1;
        noinit = 0;
    }
    if (b == 0 || a == b) return 1;
    if (0 <= memo[a][b]) return memo[a][b];
    return memo[a][b] = nCr(a - 1, b - 1) + nCr(a - 1, b);
}




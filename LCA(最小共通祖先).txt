//verify https://onlinejudge.u-aizu.ac.jp/problems/GRL_5_C
//1indexed
template <class T>
class SegmentTree{
  public:
  vector<T> tree;
  ll siz = 0;
  T e; //単位元 初期化に使われるやつ
  function<T(T,T)> op;
  function<T(T,T)> mapping = [](T a,T b){return b;};//更新に使用 デフォルトはただ更新

  SegmentTree(){}
  
  SegmentTree(ll n,T _e,function<T(T,T)> _op):e(_e),op(_op){
    ll i = 0;
    while((1 << i) < n ){
      i++;
    }
    tree.resize(1<<(i+1),_e);
    siz = 1 << i;
  }
 
  //更新も工夫したいやつ
  SegmentTree(ll n,T _e,function<T(T,T)> _op,function<T(T,T)>_mapping):e(_e),op(_op),mapping(_mapping){
    ll i = 0;
    while((1 << i) < n ){
      i++;
    }
    tree.resize(1<<(i+1),_e);
    siz = 1 << i;
  }
  
  void update(ll pos, T x){
    pos = pos + siz;
    tree[pos] = mapping(tree[pos],x);
    while(pos>=2){
      pos >>=1;
      tree[pos] = op(tree[pos << 1|0], tree[pos<<1|1]);
    }
  }

  //[l,r)
  T query(ll l,ll r){
    T retl = e,retr = e;
    l += siz;
    r += siz;
    while(l < r){
      if(l & 1)retl = op(retl,tree[l++]);//演算してから足す
      if(r & 1)retr = op(tree[--r],retr);//演算する前に引く
      l>>=1;r>>=1;
    }
    return op(retl,retr);
  }
 
  T operator[](ll pos){
    return tree[pos + siz];
  }
  
};

using P = pair<ll,ll>;
struct LCA{
  vector<pair<ll,ll>> euler_tour;//dfsしたときに現れる頂点の(深さ、頂点番号)
  vector<ll> first_appear;//頂点vがeulertour上で初めて現れるndex
  SegmentTree<P> seg_euler;
  
  LCA(ll n,vector<vector<ll>> g){//頂点数と隣接リスト
    first_appear.resize(n,INF);
    vector<ll> depth(n,INF);
    depth[0] = 0;
    dfs_euler(g,0,depth);
    seg_euler = SegmentTree<P>((ll)euler_tour.size(),{INF,INF},[](P a,P b){return min(a,b) == a ? a : b;});
    seg_euler_setup(seg_euler);
  }

  //木をdfsしてeuler_tourとfirst_appearを埋める
  void dfs_euler(vector<vector<ll>> &g,ll v,vector<ll> &depth){
    first_appear[v] = euler_tour.size();
    euler_tour.push_back({depth[v],v});
    for(auto &p:g[v]){
      if(depth[p] == INF){
        depth[p] = depth[v] + 1;
        dfs_euler(g,p,depth);
        euler_tour.push_back({depth[v],v});
      }
    }
  }

  //euler_tourの情報をSeg木に乗せるだけ
  void seg_euler_setup(SegmentTree<P> &seg_euler){
    ll siz = euler_tour.size();
    rep(i,siz){
      seg_euler.update(i,euler_tour[i]);
    }
  }

  // x,yのLCA求める({深さ,頂点番号})
  pair<ll,ll> query(ll x,ll y){
    return seg_euler.query(min(first_appear[x],first_appear[y]),max(first_appear[x],first_appear[y])+1);
  }

};
template <class T>
class SegmentTree{
  public:
  vector<T> tree;
  ll siz = 0;
  T e; //単位元 初期化に使われるやつ
  function<T(T,T)> op;
  function<T(T,T)> mapping = [](T a,T b){return b;};//更新に使用 デフォルトはただ更新

  //とりあえず定義したい時用
  SegmentTree():e(0),op([](T a,T b){return 0;}){
    tree.resize(1 << 1,0);
    siz = 1 << 0;
  }
  
  SegmentTree(ll n,T _e,function<T(T,T)> _op):e(_e),op(_op){
    ll i = 0;
    while((1 << i) < n ){
      i++;
    }
    tree.resize(1<<(i+1),_e);
    siz = 1 << i;
  }

  //更新も工夫したいやつ
  SegmentTree(ll n,T _e,function<T(T,T)> _op,function<T(T,T)>_mapping):e(e),op(_op),mapping(_mapping){
    ll i = 0;
    while((1 << i) < n ){
      i++;
    }
    tree.resize(1<<(i+1),_e);
    siz = 1 << i;
  }
  
  void update(ll pos, T x){
    pos = pos + siz-1;
    tree[pos] = mapping(tree[pos],x);
    while(pos >= 1){
      pos = (pos-1)/2;
      tree[pos] = op(tree[2 * pos +1], tree[2 * (pos+1)]);
    }
  }

  //[l,r) について、最初はa = 0,b = (SegmentTree).siz, p = 0 にしておく 
  T _query(ll l, ll r, ll a, ll b, ll p){
    if(r <= a or l >= b){
      return e;
    }
    if(l <= a and b <= r){
      return tree[p];
    }
    ll m = (a + b)/2;
    T ansr = _query(l,r,a,m,2 * p+1);
    T ansl = _query(l,r,m,b,2 * (p+1));
    return op(ansr,ansl);
  }

  //query呼び出し用[l,r)
  T query(ll l,ll r){
    return _query(l,r,0,siz,0);
  }

  T operator[](ll pos){
    return tree[pos + siz -1];
  }
  
};
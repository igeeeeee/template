// ref https://hitonanode.github.io/cplib-cpp/segmenttree/merge_sort_tree.hpp
//verify https://onlinejudge.u-aizu.ac.jp/solutions/problem/2426/review/8887581/T21140031/C++17
//1indexed
//静的配列aの[l,r)のうち値がx以下とかの個数をオンラインで求める
template <class T>
class MergeSortTree{
  public:
  ll n;
  vector<vector<T>> tree;
  
  MergeSortTree(const vector<T> &a){
    n = a.size();
    tree.resize(n * 2);
    rep(i,n){
      tree[n+i] = {a[i]};
    }
    for(ll i = n-1;i >= 1;i--){
      merge(tree[i * 2].begin(),tree[i * 2].end(),tree[i * 2 + 1].begin(),tree[i * 2 + 1].end(),back_inserter(tree[i]));
    }
  }

  //[l,r)でx未満
  ll cntLess(ll l,ll r,T x){
    l += n;
    r += n;
    ll ret = 0;
    while(l < r){
      if(l & 1){//演算してから足す
        ret += lower_bound(all(tree[l]),x) - tree[l].begin();
        l++;
      }
      if(r & 1){//演算する前に引く
        r--;
        ret += lower_bound(all(tree[r]),x) - tree[r].begin();
      }
      l>>=1;r>>=1;
    }
    return ret;
  }

  //x以下
  ll cntLesseq(ll l,ll r,T x){
    l += n;
    r += n;
    ll ret = 0;
    while(l < r){
      if(l & 1){//演算してから足す
        ret += upper_bound(all(tree[l]),x) - tree[l].begin();l++;
      }
      if(r & 1){//演算する前に引く
        r--;ret += upper_bound(all(tree[r]),x) - tree[r].begin();
      }
      l>>=1;r>>=1;
    }
    return ret;
  }

  //xより大きい
  ll cntMore(ll l,ll r,T x){
    ll total = max(0LL,min(r,n) - max(0LL,l));
    return total - cntLesseq(l,r,x);
  }

  //x以上
  ll cntMoreeq(ll l,ll r,T x){
    ll total = max(0LL,min(r,n) - max(0LL,l));
    return total - cntLess(l,r,x);
  }
};
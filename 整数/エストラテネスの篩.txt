//ref https://qiita.com/drken/items/3beb679e54266f20ab63#5-%E6%B4%BB%E7%94%A8%E4%BE%8B-2-%E3%83%A1%E3%83%93%E3%82%A6%E3%82%B9%E9%96%A2%E6%95%B0%E5%80%A4%E3%81%AE%E5%88%97%E6%8C%99
struct Eratosthenes{
  ll n;
  vector<bool> isprime;//素数ならtrue
  vector<ll> minfact;//xを割り切る一番小さい数
  vector<ll> mobius;// メビウス関数値
  /*
  メビウス関数u(x)とは
  u(1) = 1;
  xがある素数pで2回以上割り切れるとき、u(x) = 0;
  x = p1 * p2 * p3 * p4...pKと素因数分解できるときu(x) = (-1)^k 
  u(1)=1,u(2)=-1,u(3)=-1,u(4)=0,u(5)=-1,u(6)=1,u(7)=-1,u(8)=0,u(9)=0,u(10)=1
  */
  Eratosthenes(ll N){//O(NloglogN)
    n = N;
    isprime.resize(n+1,true);
    minfact.resize(n+1,-1);
    mobius.resize(n+1,1);
    isprime[0] = false;
    isprime[1] = false;
    minfact[1] = 1;
    for(ll p = 2;p <= n;p++){
      if(!isprime[p])continue;
      //pの情報を更新
      minfact[p] = p;
      mobius[p] = -1;
      for(ll q = p*2;q <= n;q+=p){
        isprime[q] = false;
        if(minfact[q] == -1)minfact[q] = p;
        if((q/p)%p==0)mobius[q]=0;//qはpで2回以上割れる
        else mobius[q] = -mobius[q];//反転
      }
    }
  }

  bool is_prime(ll x){
    assert(x <= n);
    return isprime[x];
  }

  //素因数分解(log(x))
  vector<pair<ll,ll>> soinsu_bunkai(ll x){
    vector<pair<ll,ll>> ret;
    while(x > 1){
      ll p = minfact[x];
      ll times = 0;//割り切れる回数
      while(minfact[x] == p){
        x/= p;
        times++;
      }
      ret.push_back({p,times});
    }
    return ret;
  }

  //約数列挙 O(約数の個数)　n <= 10^9 のとき 高々1344
  vector<ll> yakusu_rekkyo(ll x){
    vector<ll> ret;
    ret.push_back(1);
    vector<pair<ll,ll>> pf = soinsu_bunkai(x);
    for(auto &p:pf){
      ll siz = ret.size();
      for(ll i = 0;i < siz;i++){
        ll v = 1;
        for(ll j = 0;j < p.second;j++){
          v *= p.first;
          ret.push_back(ret[i]*v);
        }
      }
    }
    return ret;
  }
};

// 高速ゼータ変換
// 入力 f が in-place に更新されて、F になる
template<class T> void fast_zeta(vector<T> &f){
  ll n = f.size();
  Eratosthenes era(n);
  vector<bool> isprime = era.isprime;
  // 各素数 p 軸に対して
  // 大きい座標 (k * p) から小さい座標 (k) へと足し込む
  for(ll p = 2;p < n;p++){
    if(!isprime[p])continue;
    for(ll k = (n-1)/p;k >= 1;k--){
      f[k] += f[k * p];
    }
  }
} 
// 高速メビウス変換
// 入力 F が in-place に更新されて、f になる
template<class T> void fast_mobius(vector<T> &F){
  ll n = F.size();
  Eratosthenes era(n);
  vector<bool> isprime = era.isprime;
  // 各素数 p 軸に対して
  // 小さい座標 (k) から大きい座標 (k * p) を引いていく
  for(ll p = 2;p < n;p++){
    if(!isprime[p])continue;
    for(ll k = 1;k * p < n;k++){
      F[k] -= F[k * p];
    }
  }
}
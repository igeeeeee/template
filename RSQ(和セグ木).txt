class SegmentTree{
  public:
  vector<ll> tree;
  ll siz = 0;
  SegmentTree(ll n){
    ll i = 0;
    while((1 << i) < n ){
      i++;
    }
    tree.resize(1<<(i+1));
    siz = 1 << i;
  }

  void init(ll n){
    ll i = 0;
    while((1 << i) < n ){
      i++;
    }
    tree.resize(1<<(i+1));
    siz = 1 << i;
  }
  
  void update(ll pos, ll x){
    pos = pos + siz-1;
    tree[pos] = x;
    while(pos >= 1){
      pos = (pos-1)/2;
      tree[pos] = tree[2 * pos +1]+tree[2 * (pos+1)];
    }
  }
  //[l,r) について、最初はa = 0,b = (SegmentTree).siz, p = 0 にしておく
  ll _query(ll l, ll r, ll a, ll b, ll p){
    if(r <= a or l >= b){
      return 0;
    }
    if(l <= a and b <= r){
      return tree[p];
    }
    ll m = (a + b)/2;
    ll ansr = _query(l,r,a,m,2 * p+1);
    ll ansl = _query(l,r,m,b,2 * (p+1));
    return ansr + ansl;
  }

  ll query(ll l ,ll r){
    return _query(l,r,0,siz,0);
  }

  ll operator[](ll pos){
    return tree[pos + siz -1];
  }
};
{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	"atcoder-template": {
		"prefix": "atcoder",
		"body": [
			"#include <bits/stdc++.h>",
			"#include <atcoder/all>",
			"using namespace std;",
			"using namespace atcoder;",
			"#define rep(i, n) for (long long i = 0; i < (long long)(n); i++)",
			"#define rrep(i,start,end) for (long long i = start;i >= (long long)(end);i--)",
			"#define repn(i,end) for(long long i = 0; i <= (long long)(end); i++)",
			"#define reps(i,start,end) for(long long i = start; i < (long long)(end); i++)",
			"#define repsn(i,start,end) for(long long i = start; i <= (long long)(end); i++)",
			"typedef long long ll;",
			"typedef long double ld;",
			"typedef vector<long long> vll;",
			"typedef vector<vector<long long>> vvll;",
			"typedef map<long long , long long> mpll;",
			"typedef pair<long long ,long long> prll;",
			"typedef tuple<long long , long long , long long> tpl3;",
			"#define all(a)  (a).begin(),(a).end()",
			"#define UNIQUE(v) v.erase( unique(v.begin(), v.end()), v.end() );",
			"// << std::fixed << std::setprecision(10)",
			"const ll INF = 1LL << 60;",
			" ",
			"template<class T> bool chmin(T& a, T b){if(a > b){a = b;return true;}return false;}",
			"template<class T> bool chmax(T& a, T b){if(a < b){a = b;return true;}return false;}",
			"//grid探索用",
			"vector<ll> _ta = {0,0,1,-1,1,1,-1,-1};",
			"vector<ll> _yo = {1,-1,0,0,1,-1,1,-1};",
			"  ",
			"ll lpow(ll x,ll n){ll ans = 1;while(n >0){if(n & 1)ans *= x;x *= x;n >>= 1;}return ans;}",
			" ",
			"int main(){",
			"  ios::sync_with_stdio(false);cin.tie(nullptr);",
			"  ",
			"}"
			// "console.log('$1');",
			// "$2"
		],
		"description": "template for AtCoder"
	},
	"codeforces-template": {
		"prefix": "codeforces",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",,
			"#define rep(i, n) for (long long i = 0; i < (long long)(n); i++)",
			"#define rrep(i,start,end) for (long long i = start;i >= (long long)(end);i--)",
			"#define repn(i,end) for(long long i = 0; i <= (long long)(end); i++)",
			"#define reps(i,start,end) for(long long i = start; i < (long long)(end); i++)",
			"#define repsn(i,start,end) for(long long i = start; i <= (long long)(end); i++)",
			"typedef long long ll;",
			"typedef long double ld;",
			"typedef vector<long long> vll;",
			"typedef vector<vector<long long>> vvll;",
			"typedef map<long long , long long> mpll;",
			"typedef pair<long long ,long long> prll;",
			"typedef tuple<long long , long long , long long> tpl3;",
			"#define all(a)  (a).begin(),(a).end()",
			"#define UNIQUE(v) v.erase( unique(v.begin(), v.end()), v.end() );",
			"// << std::fixed << std::setprecision(10)",
			"const ll INF = 1LL << 60;",
			" ",
			"template<class T> bool chmin(T& a, T b){if(a > b){a = b;return true;}return false;}",
			"template<class T> bool chmax(T& a, T b){if(a < b){a = b;return true;}return false;}",
			"//grid探索用",
			"vector<ll> _ta = {0,0,1,-1,1,1,-1,-1};",
			"vector<ll> _yo = {1,-1,0,0,1,-1,1,-1};",
			"  ",
			"ll lpow(ll x,ll n){ll ans = 1;while(n >0){if(n & 1)ans *= x;x *= x;n >>= 1;}return ans;}",
			" ",
			"int main(){",
			"  ios::sync_with_stdio(false);cin.tie(nullptr);",
			"  ",
			"}"
			// "console.log('$1');",
			// "$2"
		],
		"description": "template for CodeForces"
	},
	"cout-endl;" : {
		"prefix": "co",
		"body": [
			"cout << $1 << endl;"
		],
		"description": "template for standard output"
	},
	"cout-space;" : {
		"prefix": "cou",
		"body": [
			"cout << $1 << \" \" ;"
		],
		"description": "template for standard output with space without endl"
	},
	"binary_search" : {
		"prefix": "Nibunntannsaku",
		"body": [
			"ll ng = $1;//条件を満たさない値",
			"ll ok = $2;//条件を満たす値",
			"auto f = [](ll mid)->bool{",
			" ",
			"};",
			"while(abs(ok-ng) > 1){",
			"  ll mid = (ok + ng)/2;",
			"  if(f(mid)){",
			"	   ok = mid;",
			"  }else{",
			"    ng = mid;",
			"  }",
			"}"

		],
		"description": "template for Binary search"
	}
}

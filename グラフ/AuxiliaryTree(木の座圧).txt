//verify https://atcoder.jp/contests/typical90/submissions/50408180
//1indexed
template <class T>
class SegmentTree{
  public:
  vector<T> tree;
  ll siz = 0;
  T e; //単位元 初期化に使われるやつ
  function<T(T,T)> op;
  function<T(T,T)> mapping = [](T a,T b){return b;};//更新に使用 デフォルトはただ更新

  SegmentTree(){}
  
  SegmentTree(ll n,T _e,function<T(T,T)> _op):e(_e),op(_op){
    ll i = 0;
    while((1 << i) < n ){
      i++;
    }
    tree.resize(1<<(i+1),_e);
    siz = 1 << i;
  }
 
  //更新も工夫したいやつ
  SegmentTree(ll n,T _e,function<T(T,T)> _op,function<T(T,T)>_mapping):e(_e),op(_op),mapping(_mapping){
    ll i = 0;
    while((1 << i) < n ){
      i++;
    }
    tree.resize(1<<(i+1),_e);
    siz = 1 << i;
  }
  
  void update(ll pos, T x){
    pos = pos + siz;
    tree[pos] = mapping(tree[pos],x);
    while(pos>=2){
      pos >>=1;
      tree[pos] = op(tree[pos << 1|0], tree[pos<<1|1]);
    }
  }

  //[l,r)
  T query(ll l,ll r){
    T retl = e,retr = e;
    l += siz;
    r += siz;
    while(l < r){
      if(l & 1)retl = op(retl,tree[l++]);//演算してから足す
      if(r & 1)retr = op(tree[--r],retr);//演算する前に引く
      l>>=1;r>>=1;
    }
    return op(retl,retr);
  }
 
  T operator[](ll pos){
    return tree[pos + siz];
  }
  
};

struct EulerTour{
  vector<ll> fa,la;//頂点vがDFS探索順で最初に現れた時間とその頂点を抜けた時間
  vector<ll> depth;
  vector<pair<ll,ll>> euler_tour;//dfsしたときに現れる頂点の(深さ、頂点番号)
  EulerTour(){}
  EulerTour(ll n,vector<vector<ll>> &g){
    fa.resize(n);la.resize(n);
    depth.resize(n,INF);
    depth[0] = 0;
    dfs_euler(g,0);
  }

  void dfs_euler(vector<vector<ll>> &g,ll v){
    fa[v] = euler_tour.size();
    euler_tour.push_back({depth[v],v});
    for(auto &p:g[v]){
      if(depth[p] == INF){
        depth[p] = depth[v] + 1;
        dfs_euler(g,p);
        euler_tour.push_back({depth[v],v});
      }
    }
    la[v] = euler_tour.size()-1;
  }
};

struct LCA{
  SegmentTree<pair<ll,ll>> seg_euler;
  EulerTour et;
  LCA(){}
  LCA(ll n,vector<vector<ll>> &g){//頂点数と隣接リスト
    et = EulerTour(n,g);
    
    seg_euler = SegmentTree<pair<ll,ll>>((ll)et.euler_tour.size(),{INF,INF},[](pair<ll,ll> a,pair<ll,ll> b){return min(a,b) == a ? a : b;});
    seg_euler_setup(seg_euler);
  }

  //euler_tourの情報をSeg木に乗せるだけ
  void seg_euler_setup(SegmentTree<pair<ll,ll>> &seg_euler){
    ll siz = et.euler_tour.size();
    rep(i,siz){
      seg_euler.update(i,et.euler_tour[i]);
    }
  }

  // x,yのLCA求める({深さ,頂点番号})
  pair<ll,ll> query(ll x,ll y){
    return seg_euler.query(min(et.fa[x],et.fa[y]),max(et.fa[x],et.fa[y])+1);
  }
};

struct AuxiliaryTree{//LCA木、共通祖先を維持したまま木を圧縮する
  LCA lca;
  ll n;

  AuxiliaryTree(ll _n, vector<vector<ll>> &g):n(_n){
    lca = LCA(_n,g);
  }
  //auxiliary tree の構築,頂点集合、隣接リスト、参照だから書き換わる
  void make_auxiliary_tree(vector<ll> &vs,vector<vector<ll>> &retg){
    assert((ll)retg.size() == n);
    auto cmp_preorder = [&](ll x,ll y){
      return lca.et.fa[x] < lca.et.fa[y]; 
    };
    sort(vs.begin(),vs.end(),cmp_preorder);
    ll siz = vs.size();
    rep(i,siz-1){
      vs.push_back(lca.query(vs[i],vs[i+1]).second);
    }
    sort(vs.begin(),vs.end(),cmp_preorder);
    vs.erase(unique(vs.begin(),vs.end()),vs.end());
    stack<ll> st;
    rep(i,vs.size()){
      ll now = vs[i];
      while(!st.empty() && lca.et.la[st.top()] < lca.et.fa[now]){
        st.pop();
      }
      if(!st.empty()){
        retg[st.top()].push_back(now);
        retg[now].push_back(st.top());
      }
      st.push(now);
    }
  }
};
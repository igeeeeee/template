template<class X,class M>
struct LazySegmentTree{
  using FX = function<X(X,X)>;
  using FA = function<X(X,M)>;
  using FM = function<M(M,M)>;
  ll siz ;
  FX fx; FA fa; FM fm;
  const X ex;//Xの単位元
  const M em;//Mの単位元
  vector<X> tree;
  vector<M> lazy;
  ll height;
  
  LazySegmentTree(ll n,FX _fx,FA _fa,FM _fm,X _ex,M _em)
  :fx(_fx),fa(_fa),fm(_fm),ex(_ex),em(_em)
  {
    ll i = 0;
    while((1 << i) < n){
      i++;
    }
    tree.resize(1 << (i+1),_ex);
    lazy.resize(1 << (i+1),_em);
    siz = 1 << i;
    height = i;
  }
  //treeの初期値を入れる,posは0indexed
  void set(ll pos, X x){
    tree[pos  + siz] = x;
  }
 /*
  siz = 4
  tree:
      1
    2		3
   4 5 6 7
  lazyはトップダウン,treeはボトムアップで更新
  */
  //set()で入れた値でtreeを更新
  void build(){
    for(int i = siz -1;i >= 1;i--){
      tree[i] = fx(tree[2*i],tree[2*i+1]);
    }
  }


  void tree_propagate(ll p){
    tree[p]= fx(tree[2*p],tree[2*p+1]);
  }

  void all_apply(ll p,M m){
    tree[p] = fa(tree[p],m);
    if(p < siz)lazy[p] = fm(lazy[p],m);
  }

  void push(ll p){
    if(lazy[p] == em)return ;
    all_apply(2 * p,lazy[p]);
    all_apply(2 * p+1,lazy[p]);
    lazy[p] = em;
  }

  X get(ll p){
    p+= siz;
    for(ll i = height;i >= 1;i--){
      push(p >> i);
    }
    return tree[p];
  }

  X query(ll l,ll r){
    if(l == r)return ex;
    l += siz;
    r += siz;

    for (ll i = height;i >= 1;i--){
      if(((l>> i) << i) != l)push(l>> i);
      if(((r>>i) << i) != r)push((r-1)>> i);
    }

    X sml = ex,smr = ex;
    while(l < r){
      if(l & 1)sml = fx(sml,tree[l++]);
      if(r & 1)smr = fx(tree[--r],smr);
      l >>= 1;
      r >>= 1;
    }
    return fx(sml,smr);

  }

  void update(ll l,ll r, M m){
    if(l == r)return ;
    l+= siz;
    r+= siz;

    for(ll i = height;i>= 1;i--){
      if(((l>> i) << i) != l)push(l >> i);
      if(((r>> i) << i) != r)push((r-1) >>i);
    }

    {
    ll tmpl = l,tmpr = r;
    while(l < r){
      if(l & 1) all_apply(l++,m);
      if(r & 1) all_apply(--r,m);
      l>>= 1;
      r>>= 1;
    }
    l = tmpl;
    r = tmpr;
    }

    for(ll i = 1;i <= height;i++){
      if(((l>>i)<< i) != l)tree_propagate(l>>i);
      if(((r>>i)<< i) != r)tree_propagate((r-1) >> i);
    }
  }
  X operator[](ll pos){
    return get(pos);
  }
 
};

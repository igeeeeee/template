template<class T>
struct WeightUnionFind{
  ll _n;
  vector<ll> par;
  vector<ll> siz;
  vector<T> diff_weight;
 
  WeightUnionFind(ll n=1,T e=0) {
    par.resize(n);
    siz.resize(n);
    diff_weight.resize(n);
    rep(i,n){
      par[i] = -1;siz[i] = 1;diff_weight[i] = e;
    }
    _n = n;
  }
 
  ll leader(ll a){
    assert(0 <= a && a < _n);
    if(par[a] == -1){
      return a;
    }else{
      ll r = leader(par[a]);
      diff_weight[a] += diff_weight[par[a]];
      return par[a] = r;
    }
  }

  T weight(ll a){
    leader(a);//重みの更新
    return diff_weight[a]; 
  }
 
  ll size(ll a){
    assert(0 <= a && a < _n);
    return siz[leader(a)];
  }

  // weight(b) - weight(a) = w となるように merge する
  bool merge(ll a,ll b,T w){
    assert(0 <= a && a < _n);
    assert(0 <= b && b < _n);
    w += weight(a);w -=weight(b);//a,bそれぞれrootとの重み差分を修正
    ll u = leader(a);
    ll v = leader(b);
    if( u == v )return false;//同じグループにいた
    if(siz[u] >= siz[v]){
      par[v] = u;
      siz[u] += siz[v];
      diff_weight[v] = w;
      return u;
    }else{
      par[u] = v;
      siz[v] += siz[u];
      diff_weight[u] = -w;
      return v;
    }
  }

  T diff(ll a,ll b){
    return weight(b) - weight(a);
  }
 
  bool same(ll a,ll b){
    assert(0 <= a && a < _n);
    assert(0 <= b && b < _n);
    if(leader(a) == leader(b)){
      return true;
    }else{
      return false;
    }
  }
 
  vector<vector<ll>> groups(){
    map<ll,vector<ll>> mp;
    for(ll i = 0;i < _n;i++){
      mp[leader(i)].push_back(i);
    }
    vector<vector<ll>> ans;
    for(auto &p:mp){
      vector<ll> now = p.second;
      ans.push_back(now);
    }
    return ans;
  }

};
 
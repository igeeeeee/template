/* https://betrue12.hateblo.jp/entry/2020/09/22/194541
vは配列
lazy_segtree<S, op, e, F, mapping, composition, id> seg(v);

S                       各要素および区間取得結果の型
F                       操作（写像）を表す値の型(遅延操作のこと)
S op(S a, S b)          区間取得をどのような演算で行うかを定義
S mapping(F f, S x)     操作 f を各ノードが持つ data の値 x に対して作用させる関数
F composition(F f, F g) これまでの操作を溜めている lazy に対して、さらに新しい操作を追加する関数
                        g がこれまでの操作、f が後に追加する操作
S e()                   区間取得演算 op の単位元
F id()                  区間操作演算 mappingの恒等写像



*/

/*
  区間加算、区間最小値
*/

using S = long long;
using F = long long;

S op(S a, S b){ return std::min(a, b); }
S e(){ return INF; }
S mapping(F f, S x){ return f+x; }
F composition(F f, F g){ return f+g; }
F id(){ return 0; }

int main(){
    int N;
    std::vector<S> v(N);
    atcoder::lazy_segtree<S, op, e, F, mapping, composition, id> seg(v);
}

/*
 区間加算、区間最大値
*/

using S = long long;
using F = long long;

S op(S a, S b){ return std::max(a, b); }
S e(){ return -INF; }
S mapping(F f, S x){ return f+x; }
F composition(F f, F g){ return f+g; }
F id(){ return 0; }

int main(){
    int N;
    std::vector<S> v(N);
    atcoder::lazy_segtree<S, op, e, F, mapping, composition, id> seg(v);
}

/*
 区間加算、区間和
 value:値,size = 区間長
*/

struct S{
    long long value;
    int size;
};
using F = long long;

S op(S a, S b){ return {a.value+b.value, a.size+b.size}; }
S e(){ return {0, 0}; }
S mapping(F f, S x){ return {x.value + f*x.size, x.size}; }
F composition(F f, F g){ return f+g; }
F id(){ return 0; }

int main(){
    int N;
    std::vector<S> v(N, {0, 1});
    atcoder::lazy_segtree<S, op, e, F, mapping, composition, id> seg(v);
}


/*
区間変更、区間最小値
*/

using S = long long;
using F = long long;

const F ID = 8e18;

S op(S a, S b){ return std::min(a, b); }
S e(){ return INF; }
S mapping(F f, S x){ return (f == ID ? x : f); }
F composition(F f, F g){ return (f == ID ? g : f); }
F id(){ return ID; }

int main(){
    int N;
    std::vector<S> v(N);
    atcoder::lazy_segtree<S, op, e, F, mapping, composition, id> seg(v);
}

/*
区間変更、区間最大値
*/

using S = long long;
using F = long long;

const F ID = 8e18;

S op(S a, S b){ return std::max(a, b); }
S e(){ return -INF; }
S mapping(F f, S x){ return (f == ID ? x : f); }
F composition(F f, F g){ return (f == ID ? g : f); }
F id(){ return ID; }

int main(){
    int N;
    std::vector<S> v(N);
    atcoder::lazy_segtree<S, op, e, F, mapping, composition, id> seg(v);
}


/*
区間変更、区間和
*/

struct S{
    long long value;
    int size;
};
using F = long long;

const F ID = 8e18;

S op(S a, S b){ return {a.value+b.value, a.size+b.size}; }
S e(){ return {0, 0}; }
S mapping(F f, S x){
    if(f != ID) x.value = f*x.size;
    return x;
}
F composition(F f, F g){ return (f == ID ? g : f); }
F id(){ return ID; }

int main(){
    int N;
    std::vector<S> v(N, {0, 1});
    atcoder::lazy_segtree<S, op, e, F, mapping, composition, id> seg(v);
}
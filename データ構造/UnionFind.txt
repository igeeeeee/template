class UnionFind{
  public:
  vector<ll> par;
  vector<ll> siz;
 
  UnionFind(ll n) {
    par.resize(n,-1);
    siz.resize(n,1);
    _n = n;
  }
 
  ll leader(ll a){
    assert(0 <= a && a < _n);
    while(par[a] != -1){
      a = par[a];
    }
    return a;
  }
 
  ll size(ll a){
    assert(0 <= a && a < _n);
    return siz[leader(a)];
  }
 
  ll merge(ll a,ll b){
    assert(0 <= a && a < _n);
    assert(0 <= b && b < _n);
    ll u = leader(a);
    ll v = leader(b);
    if( u == v )return u;
    if(siz[u] >= siz[v]){
      par[v] = u;
      siz[u] += siz[v];
      return u;
    }else{
      par[u] = v;
      siz[v] += siz[u];
      return v;
    }
  }
 
  bool same(ll a,ll b){
    assert(0 <= a && a < _n);
    assert(0 <= b && b < _n);
    if(leader(a) == leader(b)){
      return true;
    }else{
      return false;
    }
  }
 
  vector<vector<ll>> groups(){
    map<ll,vector<ll>> mp;
    for(ll i = 0;i < _n;i++){
      mp[leader(i)].push_back(i);
    }
    vector<vector<ll>> ans;
    for(auto &p:mp){
      vector<ll> now = p.second;
      ans.push_back(now);
    }
    return ans;
  }
 
  private:
  ll _n;
};
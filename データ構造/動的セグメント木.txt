// Dynamic Segment Tree
//verify https://atcoder.jp/contests/abc403/submissions/65613814
//ref1 https://tjkendev.github.io/procon-library/cpp/range_query/dynamic_segment_tree.html  updateが変かも？
//ref2 https://lorent-kyopro.hatenablog.com/entry/2021/03/12/025644 update部分を参考にした
template<class T>
struct DynamicSegmentTree {
	int n, siz;
	T e ;
	function<T(T,T)> op;
	
	struct Node {
		Node *left, *right;
		T v;
		
		Node(const T& _e) : left(nullptr), right(nullptr), v(_e) {}
		~Node() {
			delete left;
			delete right;
		}
	};
	
	Node *root;
 
  DynamicSegmentTree(int _n) : n(_n) {
    siz = 1;
    while(siz < n) siz <<= 1;
    root = new Node(e);
  }
	DynamicSegmentTree(int _n,T _e,function<T(T,T)>_op):n(_n),e(_e),op(_op){
		siz = 1;
    while(siz < n) siz <<= 1;
    root = new Node(e);
	}
  ~DynamicSegmentTree() {
    delete root; root = nullptr;
  }
 
	void update(Node*& n, int a, int b, int p, T x) {
		// そのノードがまだ作られていなかったら作る
		if (!n) n = new Node(e);
		// 区間幅が 1、つまりセグ木の葉にたどり着いたら値を更新
		if (b - a == 1) {
				n->v = x;
				return;
		}
		// それ以外の場合は左か右の子に進む
		int c = (a + b) >> 1;
		if (p < c) update(n->left, a, c, p, x);
		else update(n->right, c, b, p, x);
		// ノードの値の更新（左右の子が作られていない可能性があることに注意）
		n->v = e;
		if (n->left) n->v = op(n->left->v,n->v);
		if (n->right) n->v = op(n->v,n->right->v);
	}

	void update(int p,T x){
		update(root,0,siz,p,x);
	}
 
  T query(int a, int b) {
    return query(a, b, root, 0, siz);
  }

	T query(int a, int b, Node *n, int l, int r) {
		if(r <= a || b <= l) {
			return e;
		}
    if(a <= l && r <= b) {
      return n->v;
    }
 
    T lv = n->left ? query(a, b, n->left, l, (l + r) >> 1) : e;
    T rv = n->right ? query(a, b, n->right, (l + r) >> 1, r) : e;
    return op(lv,rv);
  }
};
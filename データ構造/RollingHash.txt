//global
#define ulong unsigned long long
const ulong MASK30 = (1UL << 30) - 1;
const ulong MASK31 = (1UL << 31) - 1;
const ulong MOD = (1UL << 61) - 1;
const ulong MASK61 = MOD;
const ulong POSITIVIZER = MOD * 4;

//mod 2^61-1を計算する関数
ulong CalcMod(ulong x)
{
    ulong xu = x >> 61;
    ulong xd = x & MASK61;
    ulong res = xu + xd;
    if (res >= MOD) res -= MOD;
    return res;
}
//a*b mod 2^61-1を返す関数(最後にModを取る)
ulong Mul(ulong a, ulong b)
{
    ulong au = a >> 31;
    ulong ad = a & MASK31;
    ulong bu = b >> 31;
    ulong bd = b & MASK31;
    ulong mid = ad * bu + au * bd;
    ulong midu = mid >> 30;
    ulong midd = mid & MASK30;
    return CalcMod(au * bu * 2 + midu + (midd << 31) + ad * bd);
}

//2^61 -1 で割る時のpow計算

ulong SuperMODpow(ll x,ll n){
  // MOD = (1UL << 61) - 1;,Mul,CalcMod必要
  ulong ans = 1;
  ulong a = x;
  while(n> 0){
    if(n & 1){
      ans = Mul(ans,a);
    }
    a = Mul(a,a);
    n>>=1;
  }
  return ans;
}
 

/*
  //main
  vector<ll> hash(n+1,0);
  //Hashの計算累積和的に,Hash[i] = [0,i)の半開で持つ
  rep(i,n){
    hash[i + 1] = CalcMod((Mul(hash[i],100LL) + (ll)(s[i] - 'A')));
  }

  rep(i,q){
    auto [a,b,c,d] = abcd[i];
    ulong f = CalcMod(hash[b+1]+ POSITIVIZER - Mul(hash[a],SuperMODpow(100,b+1-a)));
    ulong l = CalcMod(hash[d+1]+ POSITIVIZER - Mul(hash[c],SuperMODpow(100,d+1-c)));
    // f,lはPOSITIVIZERを足したことで負にならない
  }
*/


//ライブラリにしたやつ

//参考 https://drken1215.hatenablog.com/entry/2019/03/12/135500
//https://qiita.com/keymoon/items/11fac5627672a6d6a9f6
//verify https://atcoder.jp/contests/tessoku-book/submissions/52829138
struct RollingHash{

  const ull MASK30 = (1UL << 30) - 1;
  const ull MASK31 = (1UL << 31) - 1;
  const ull MOD = (1UL << 61) - 1;
  const ull MASK61 = MOD;
  const ull POSITIVIZER = MOD * 4;
  const ull base = 9973;


  string s;
  vector<ull> hash;

  RollingHash(){}

  RollingHash(const string &_s){
    init(_s);
  }

  //mod 2^61-1を計算する関数
  ull CalcMod(ull x)
  {
      ull xu = x >> 61;
      ull xd = x & MASK61;
      ull res = xu + xd;
      if (res >= MOD) res -= MOD;
      return res;
  }
  //a*b mod 2^61-1を返す関数(最後にModを取る)
  ull Mul(ull a, ull b)
  {
      ull au = a >> 31;
      ull ad = a & MASK31;
      ull bu = b >> 31;
      ull bd = b & MASK31;
      ull mid = ad * bu + au * bd;
      ull midu = mid >> 30;
      ull midd = mid & MASK30;
      return CalcMod(au * bu * 2 + midu + (midd << 31) + ad * bd);
  }
  
  //2^61 -1 で割る時のpow計算
  
  ull SuperMODpow(ll x,ll n){
    // MOD = (1UL << 61) - 1;,Mul,CalcMod必要
    ull ans = 1;
    ull a = x;
    while(n> 0){
      if(n & 1){
        ans = Mul(ans,a);
      }
      a = Mul(a,a);
      n>>=1;
    }
    return ans;
  }

  void init(const string &_s){
    s = _s;
    ll n = s.size();
    hash.assign(n+1,0);
    rep(i,n){
      hash[i + 1] = CalcMod((Mul(hash[i],base) + s[i]));
    }
  }

  //[l,r)のハッシュを返す
  inline ull get(ll l,ll r){
    return CalcMod(hash[r]+ POSITIVIZER - Mul(hash[l],SuperMODpow(base,r-l)));
  }
};
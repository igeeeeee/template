template<class X,class M>
struct LazySegmentTree{
	using FX = function<X(X,X)>;
	using FA = function<X(X,M)>;
	using FM = function<M(M,M)>;
	using FP = function<M(M,ll)>;
	ll siz;
	FX fx; FA fa; FM fm; FP fp;
	const X ex;//Xの単位元
	const M em;//Mの単位元
	vector<X> tree;
	vector<M> lazy;
	
	LazySegmentTree(ll n,FX _fx,FA _fa,FM _fm,FP _fp,X _ex,M _em)
	:fx(_fx),fa(_fa),fm(_fm),fp(_fp),ex(_ex),em(_em)
	{
		ll i = 0;
		while((1 << i) < n){
			i++;
		}
		tree.resize(1 << (i+1),_ex);
		lazy.resize(1 << (i+1),_em);
		siz = 1 << i;
	}
	//treeの初期値を入れる,posは0indexed
	void set(ll pos, X x){
		tree[pos  + siz -1] = x;
	}
	/*
	siz = 4
	tree:
			0
		1		2
	 3 4 5 6
	*/
	//set()で入れた値でtreeを更新
	void build(){
		for(int i = siz -2;i >= 0;i--){
			tree[i]  = fx(tree[2 * i+1],tree[2 * (i+1)]);
		}
	}
	//遅延評価
	void eval(ll p, ll len){
		if(lazy[p] == em) return ;//更新するものがなければ終了
		if(p < siz-1){
			lazy[2*p+1] = fm(lazy[2*p+1],lazy[p]);
			lazy[2*(p+1)] = fm(lazy[2*(p+1)],lazy[p]);
		}
		tree[p] = fa(tree[p],fp(lazy[p],len));//自身の更新
		lazy[p] = em;
	}

	//やりたい区間[l,r),今見ている配列が対応する区間[a,b),今見ている配列の番地p
	void _update(ll l, ll r, M x,ll a,ll b,ll p){
		eval(p,b-a);//とりあえずまだ送ってないのがあれば下に伝搬
		// lr <= ab or ab <= lr
		if(r <= a || b <= l){
			//範囲外だった
			return ;
		}
		// l <= ab <= r
		if(l <= a  && b <= r){
			//完全に範囲内
			lazy[p] = fm(lazy[p],x);
			eval(p,b-a);
			return ;
		}
		ll m = (a + b)/2;
		_update(l,r,x,a,m,2 * p+1);
		_update(l,r,x,m,b,2 * (p+1));
		tree[p] = fx(tree[2*p+1],tree[2*(p+1)]);
		
	}
	void update(ll l, ll r,M x){
		_update(l,r,x,0,siz,0);
	}

	X _query(ll l,ll r,ll a,ll b,ll p){
		eval(p,b-a);//とりあえずまだ送ってないのを伝搬
		// lr <= ab or ab <= lr
		if(r <= a || b <= l){//範囲外
			return ex;
		}
		// l <= ab <= r
		if(l <= a && b <= r){//完全に範囲内
			return tree[p];
		}
		ll m = (a + b)/2;
		X ansl = _query(l,r,a,m,2 * p+1);
		X ansr = _query(l,r,m,b,2 * (p+1));
		return fx(ansl,ansr);
		
	}

	X query(ll l,ll r){
		return _query(l,r,0,siz,0);
	}

	X operator[](ll pos){
    return tree[pos + siz -1];
  }

};
//ref https://algo-logic.info/trie-tree/#
// verify https://atcoder.jp/contests/abc353/submissions/53574123
//i番目のノードのrootからの距離がもしかしたら怪しいかも
//char_size:文字の種類数、その0番目に当たる文字を base
//例　: Trie<26,'a'>
template<ll char_size,ll base>
struct Trie{
  struct Node{
    vector<ll> next;//子のidx,存在しないなら-1
    vector<ll> accept;//その頂点が末端となる文字列のid
    ll c; //baseからの距離
    ll common; //その頂点を何個の文字列が共有しているか
    Node(ll _c){
      c = _c;
      common = 0;
      next.assign(char_size,-1);
    }
  };

  vector<Node> nodes;
  ll root;

  Trie(){
    root = 0;
    nodes.push_back(Node(root));
  }

  //文字列の挿入
  void insert(const string &word,ll wordid){
    ll nodeid = 0;
    rep(i,word.size()){
      ll c = (ll)(word[i] - base);
      ll nextid = nodes[nodeid].next[c];
      if(nextid == -1){//次の頂点がない
        nextid = nodes.size();
        nodes.push_back(Node(nodes[nodeid].c + 1)); //rootからの距離をNodeに持たせる.参考元から変更した
        nodes[nodeid].next[c] = nextid;
      }
      nodes[nodeid].common++;
      nodeid = nextid;
    }
    nodes[nodeid].common++;
    nodes[nodeid].accept.push_back(wordid);
  }
  void insert(const string &word){
    insert(word,nodes[0].common);
  }

  //wordがすでに存在するか
  bool search(const string &word,bool prefix = false){
    ll nodeid = 0;
    rep(i,word.size()){
      ll c = (ll)(word[i] - base);
      ll nextid = nodes[nodeid].next[c];
      if(nextid == -1){//次の頂点がない
        return false;
      }
      nodeid = nextid;
    }
    if(prefix){
      return true;
    }else{
      return nodes[nodeid].accept.size() > 0;
    }
  }
  bool start_with(const string &prefix){
    return search(prefix,true);
  }

  //挿入した数
  ll count() const {
    return nodes[0].common;
  }

  // Trie木のノードの数
  ll size() const {
    return nodes.size();
  }

};
//1indexed
template <class T>
class SegmentTree{
  public:
  vector<T> tree;
  ll siz = 0;
  T e; //単位元 初期化に使われるやつ
  function<T(T,T)> op;
  function<T(T,T)> mapping = [](T a,T b){return b;};//更新に使用 デフォルトはただ更新
 
  //とりあえず定義したい時用
  SegmentTree():e(0),op([](T a,T b){return 0;}){
    tree.resize(1 << 1,0);
    siz = 1 << 0;
  }
  
  SegmentTree(ll n,T _e,function<T(T,T)> _op):e(_e),op(_op){
    ll i = 0;
    while((1 << i) < n ){
      i++;
    }
    tree.resize(1<<(i+1),_e);
    siz = 1 << i;
  }
 
  //更新も工夫したいやつ
  SegmentTree(ll n,T _e,function<T(T,T)> _op,function<T(T,T)>_mapping):e(_e),op(_op),mapping(_mapping){
    ll i = 0;
    while((1 << i) < n ){
      i++;
    }
    tree.resize(1<<(i+1),_e);
    siz = 1 << i;
  }
  
  void update(ll pos, T x){
    pos = pos + siz;
    tree[pos] = mapping(tree[pos],x);
    while(pos>=2){
      pos >>=1;
      tree[pos] = op(tree[pos << 1|0], tree[pos<<1|1]);
    }
  }

  //[l,r)
  T query(ll l,ll r){
    T retl = e,retr = e;
    l += siz;
    r += siz;
    while(l < r){
      if(l & 1)retl = op(retl,tree[l++]);//演算してから足す
      if(r & 1)retr = op(tree[--r],retr);//演算する前に引く
      l>>=1;r>>=1;
    }
    return op(retl,retr);
  }
 
  T operator[](ll pos){
    return tree[pos + siz];
  }
  
};